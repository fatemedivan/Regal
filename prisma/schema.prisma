// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String @id @default(uuid())
  phoneNumber    String @unique
  hashedPassword String

  firstName String?
  lastName  String?
  email     String?

  role      String   @default("user")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  likedProducts LikedProduct[]
  carts         Cart[]
  orders        Order[]
  addresses     Address[]
}

model Category {
  id            String     @id @default(uuid())
  name          String     @unique
  parentId      String?
  parent        Category?  @relation("Subcategories", fields: [parentId], references: [id], onDelete: Cascade)
  subcategories Category[] @relation("Subcategories")

  products Product[]
}

model Product {
  id              String   @id @default(uuid())
  name            String   @unique
  description     String?
  price           Float
  discountedPrice Float?
  isDiscounted    Boolean  @default(false)
  imageUrl        String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  likes LikedProduct[]

  productColors ProductColor[]
  productSizes  ProductSize[]
  images        ProductImage[]
  cartItems     CartItem[]
  orderItems    OrderItem[]
}

model Color {
  id        String   @id @default(uuid())
  name      String   @unique
  hexCode   String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  productColors ProductColor[]
}

model ProductColor {
  id        String   @id @default(uuid())
  productId String
  colorId   String
  createdAt DateTime @default(now())

  product Product @relation(fields: [productId], references: [id])
  color   Color   @relation(fields: [colorId], references: [id])

  cartItems CartItem[]

  @@unique([productId, colorId])
}

model Size {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  productSizes ProductSize[]
}

model ProductSize {
  id        String   @id @default(uuid())
  productId String
  sizeId    String
  createdAt DateTime @default(now())

  product Product @relation(fields: [productId], references: [id])
  size    Size    @relation(fields: [sizeId], references: [id])

  cartItems CartItem[]

  @@unique([productId, sizeId])
}

model ProductImage {
  id        String   @id @default(uuid())
  productId String
  imageUrl  String
  createdAt DateTime @default(now())

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, imageUrl])
}

model LikedProduct {
  id        String   @id @default(uuid())
  userId    String
  productId String
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
}

model Cart {
  id        String   @id @default(uuid())
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User       @relation(fields: [userId], references: [id])
  items CartItem[]
}

model CartItem {
  id             String   @id @default(uuid())
  cartId         String
  productId      String
  productColorId String?
  productSizeId  String?
  quantity       Int      @default(1)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  cart         Cart          @relation(fields: [cartId], references: [id])
  product      Product       @relation(fields: [productId], references: [id])
  productColor ProductColor? @relation(fields: [productColorId], references: [id])
  productSize  ProductSize?  @relation(fields: [productSizeId], references: [id])

  @@unique([cartId, productId, productColorId, productSizeId])
}

model Order {
  id             String   @id @default(uuid())
  userId         String
  totalAmount    Float
  status         String   @default("pending")
  orderDate      DateTime @default(now())
  fullAddress    String? // <--- اضافه شد
  deliveryMethod String? // <--- اضافه شد
  paymentMethod  String? // <--- اضافه شد

  user  User        @relation(fields: [userId], references: [id])
  items OrderItem[]
}

model OrderItem {
  id           String @id @default(uuid())
  orderId      String
  productId    String
  quantity     Int
  priceAtOrder Float

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@unique([orderId, productId])
}

model Address {
  id          String   @id @default(uuid())
  userId      String
  fullAddress String
  province    String
  city        String
  postalCode  String
  details     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}
