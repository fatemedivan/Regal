// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// مدل User: اطلاعات کاربران
model User {
  id              String         @id @default(uuid())
  phoneNumber     String         @unique // شماره تلفن کاربر (منحصربه‌فرد)
  hashedPassword  String         // رمز عبور هش شده

  firstName String? // نام کوچک (اختیاری)
  lastName  String? // نام خانوادگی (اختیاری)
  email     String? // ایمیل (اختیاری)

  role          String         @default("user") // نقش کاربر (پیش‌فرض: user)
  createdAt     DateTime       @default(now()) // زمان ساخت کاربر
  updatedAt     DateTime       @updatedAt // زمان آخرین به‌روزرسانی

  likedProducts LikedProduct[] // محصولاتی که کاربر پسندیده است
  carts         Cart[]         // سبدهای خرید کاربر
  orders        Order[]        // سفارشات کاربر
  addresses     Address[]      // آدرس‌های کاربر
}

// مدل Category: دسته‌بندی محصولات
model Category {
  id            String     @id @default(uuid())
  name          String     @unique // نام دسته‌بندی (منحصربه‌فرد)
  parentId      String?    // ID دسته‌بندی والد (برای زیردسته‌ها)
  parent        Category?  @relation("Subcategories", fields: [parentId], references: [id], onDelete: Cascade) // رابطه با دسته‌بندی والد
  subcategories Category[] @relation("Subcategories") // زیردسته‌های این دسته‌بندی

  products Product[] // محصولاتی که در این دسته‌بندی قرار دارند
}

// مدل Product: اطلاعات محصولات
model Product {
  id              String         @id @default(uuid())
  name            String         @unique // نام محصول (منحصربه‌فرد)
  description     String?        // توضیحات محصول (اختیاری)
  price           Float          // قیمت محصول
  discountedPrice Float?         // قیمت با تخفیف (اختیاری)
  isDiscounted    Boolean        @default(false) // آیا محصول تخفیف دارد؟
  imageUrl        String?        // URL تصویر اصلی محصول (اختیاری)
  createdAt       DateTime       @default(now()) // زمان ساخت محصول
  updatedAt       DateTime       @updatedAt // زمان آخرین به‌روزرسانی

  categoryId String   // ID دسته‌بندی محصول
  category   Category @relation(fields: [categoryId], references: [id]) // رابطه با دسته‌بندی

  likes LikedProduct[] // لایک‌های این محصول

  // روابط برای مدیریت رنگ‌ها و سایزهای محصول
  productColors ProductColor[] // رنگ‌های موجود برای این محصول
  productSizes  ProductSize[]  // سایزهای موجود برای این محصول
  images        ProductImage[] // تصاویر بیشتر محصول
  cartItems     CartItem[]     // آیتم‌های سبد خرید مرتبط با این محصول
  orderItems    OrderItem[]    // آیتم‌های سفارش مرتبط با این محصول
}

// مدل Color: اطلاعات رنگ‌ها
model Color {
  id        String       @id @default(uuid())
  name      String       @unique // نام رنگ (مثلا "مشکی", "قرمز")
  hexCode   String       @unique // کد هگز رنگ (مثلا "#000000", "#FF0000")
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  productColors ProductColor[] // محصولاتی که این رنگ را دارند
}

// مدل ProductColor: رابطه میانی محصول و رنگ (Many-to-Many)
// هر رکورد نشان‌دهنده این است که یک محصول خاص، یک رنگ خاص را دارد.
model ProductColor {
  id        String   @id @default(uuid())
  productId String
  colorId   String
  createdAt DateTime @default(now())

  product Product @relation(fields: [productId], references: [id]) // محصول مرتبط
  color   Color   @relation(fields: [colorId], references: [id])   // رنگ مرتبط

  // NEW: فیلد برگشتی برای اشاره به CartItem هایی که از این ProductColor استفاده می‌کنند
  cartItems CartItem[] // این خط جدید اضافه شده است

  @@unique([productId, colorId]) // تضمین می‌کند که یک محصول یک رنگ را فقط یک بار داشته باشد (مثلا محصول A فقط یک بار رنگ مشکی داشته باشد)
}

// مدل Size: اطلاعات سایزها
model Size {
  id        String        @id @default(uuid())
  name      String        @unique // نام سایز (مثلا "S", "M", "L", "Free Size")
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  productSizes ProductSize[] // محصولاتی که این سایز را دارند
}

// مدل ProductSize: رابطه میانی محصول و سایز (Many-to-Many)
// هر رکورد نشان‌دهنده این است که یک محصول خاص، یک سایز خاص را دارد.
model ProductSize {
  id        String   @id @default(uuid())
  productId String
  sizeId    String
  createdAt DateTime @default(now())

  product Product @relation(fields: [productId], references: [id]) // محصول مرتبط
  size    Size    @relation(fields: [sizeId], references: [id])   // سایز مرتبط

  // NEW: فیلد برگشتی برای اشاره به CartItem هایی که از این ProductSize استفاده می‌کنند
  cartItems CartItem[] // این خط جدید اضافه شده است

  @@unique([productId, sizeId]) // تضمین می‌کند که یک محصول یک سایز را فقط یک بار داشته باشد
}

// مدل ProductImage: تصاویر اضافی برای هر محصول
model ProductImage {
  id        String   @id @default(uuid())
  productId String
  imageUrl  String   // URL عکس
  createdAt DateTime @default(now())

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade) // محصول مرتبط

  @@unique([productId, imageUrl]) // یک محصول نباید دو بار یک عکس یکسان داشته باشد
}

// مدل LikedProduct: محصولاتی که توسط کاربران لایک شده‌اند
model LikedProduct {
  id        String   @id @default(uuid())
  userId    String
  productId String
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])     // کاربری که لایک کرده
  product Product @relation(fields: [productId], references: [id]) // محصول لایک شده

  @@unique([userId, productId]) // تضمین می‌کند که یک کاربر یک محصول را فقط یک بار لایک کند
}

// مدل Cart: سبد خرید کاربران
model Cart {
  id        String     @id @default(uuid())
  userId    String     @unique // ID کاربر صاحب سبد خرید (منحصربه‌فرد برای هر کاربر)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  user  User       @relation(fields: [userId], references: [id]) // کاربر صاحب سبد خرید
  items CartItem[] // آیتم‌های داخل این سبد خرید
}

// مدل CartItem: آیتم‌های داخل سبد خرید
// این مدل برای ذخیره جزئیات هر محصول در سبد خرید استفاده می‌شود.
model CartItem {
  id             String        @id @default(uuid())
  cartId         String        // ID سبد خریدی که این آیتم به آن تعلق دارد
  productId      String        // ID محصول اصلی
  productColorId String?       // NEW: ID رنگ انتخابی برای این محصول (اختیاری)
  productSizeId  String?       // NEW: ID سایز انتخابی برای این محصول (اختیاری)
  quantity       Int           @default(1) // تعداد این محصول در سبد خرید
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  cart         Cart          @relation(fields: [cartId], references: [id]) // سبد خرید مرتبط
  product      Product       @relation(fields: [productId], references: [id]) // محصول اصلی مرتبط
  productColor ProductColor? @relation(fields: [productColorId], references: [id]) // NEW: رنگ خاص انتخاب شده برای این آیتم
  productSize  ProductSize?  @relation(fields: [productSizeId], references: [id])   // NEW: سایز خاص انتخاب شده برای این آیتم

  // NEW UNIQUE CONSTRAINT: تضمین می‌کند که یک محصول با یک رنگ و سایز خاص
  // فقط یک بار در یک سبد خرید وجود داشته باشد.
  // اگر کاربر دوباره همان محصول را با همان رنگ و سایز اضافه کند، فقط quantity افزایش می‌یابد.
  @@unique([cartId, productId, productColorId, productSizeId])
}

// مدل Order: سفارشات کاربران
model Order {
  id          String    @id @default(uuid())
  userId      String    // ID کاربر سفارش‌دهنده
  totalAmount Float     // مبلغ کل سفارش
  status      String    @default("pending") // وضعیت سفارش (مثلا "pending", "completed", "cancelled")
  orderDate   DateTime  @default(now()) // تاریخ ثبت سفارش

  user  User        @relation(fields: [userId], references: [id]) // کاربر صاحب سفارش
  items OrderItem[] // آیتم‌های این سفارش
}

// مدل OrderItem: آیتم‌های داخل سفارش
model OrderItem {
  id           String @id @default(uuid())
  orderId      String // ID سفارشی که این آیتم به آن تعلق دارد
  productId    String // ID محصول
  quantity     Int    // تعداد محصول در این سفارش
  priceAtOrder Float  // قیمت محصول در زمان ثبت سفارش (برای جلوگیری از تغییر قیمت در آینده)

  order   Order   @relation(fields: [orderId], references: [id])   // سفارش مرتبط
  product Product @relation(fields: [productId], references: [id]) // محصول مرتبط

  @@unique([orderId, productId]) // تضمین می‌کند که یک محصول فقط یک بار در یک سفارش وجود داشته باشد
}

// مدل Address: آدرس‌های کاربران
model Address {
  id         String   @id @default(uuid())
  userId     String   // ID کاربر صاحب آدرس
  title      String?  // عنوان آدرس (مثلا "خانه", "محل کار") (اختیاری)
  province   String   // استان
  city       String   // شهر
  postalCode String   // کد پستی
  details    String   // جزئیات آدرس (خیابان، پلاک و ...)
  isDefault  Boolean  @default(false) // آیا این آدرس پیش‌فرض است؟
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user User @relation(fields: [userId], references: [id]) // کاربر صاحب آدرس

  @@unique([userId, title], name: "UserAddressTitleUnique") // تضمین می‌کند که یک کاربر دو آدرس با یک عنوان نداشته باشد
}