generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id             String @id @default(uuid())
  phoneNumber    String @unique
  hashedPassword String

  firstName String?
  lastName  String?
  email     String? 

  role      String   @default("user")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  likedProducts LikedProduct[]
  carts         Cart[]
  orders        Order[]
  addresses     Address[]
}

model Category {
  id       String    @id @default(uuid())
  name     String    @unique
  products Product[]
}

model Product {
  id              String   @id @default(uuid())
  name            String
  description     String?
  price           Float
  discountedPrice Float?
  isDiscounted    Boolean  @default(false)
  color           String?
  size            String?
  imageUrl        String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  likes      LikedProduct[]
  cartItems  CartItem[]
  orderItems OrderItem[]
}

model LikedProduct {
  id        String   @id @default(uuid())
  userId    String
  productId String
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
}

model Cart {
  id        String   @id @default(uuid())
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User       @relation(fields: [userId], references: [id])
  items CartItem[]
}

model CartItem {
  id        String   @id @default(uuid())
  cartId    String
  productId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cart    Cart    @relation(fields: [cartId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@unique([cartId, productId])
}

model Order {
  id          String   @id @default(uuid())
  userId      String
  totalAmount Float
  status      String   @default("pending")
  orderDate   DateTime @default(now())

  user  User        @relation(fields: [userId], references: [id])
  items OrderItem[]
}

model OrderItem {
  id           String @id @default(uuid())
  orderId      String
  productId    String
  quantity     Int
  priceAtOrder Float

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@unique([orderId, productId])
}

model Address {
  id         String   @id @default(uuid())
  userId     String
  title      String?
  province   String
  city       String
  postalCode String
  details    String
  isDefault  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@unique([userId, title], name: "UserAddressTitleUnique")
}
