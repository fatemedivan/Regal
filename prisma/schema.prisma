// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id             String         @id @default(uuid())
  phoneNumber    String         @unique
  hashedPassword String

  firstName String?
  lastName  String?
  email     String?

  role          String         @default("user")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  likedProducts LikedProduct[]
  carts         Cart[]
  orders        Order[]
  addresses     Address[]
}

model Category {
  id            String     @id @default(uuid())
  name          String     @unique
  parentId      String?
  parent        Category?  @relation("Subcategories", fields: [parentId], references: [id], onDelete: Cascade)
  subcategories Category[] @relation("Subcategories")

  products Product[]
}

model Product {
  id              String   @id @default(uuid())
  name            String   @unique
  description     String?
  price           Float
  discountedPrice Float?
  isDiscounted    Boolean  @default(false)
  imageUrl        String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  likes LikedProduct[]

  // ✅ روابط جدید برای چندین رنگ و سایز
  productColors ProductColor[]
  productSizes  ProductSize[]

  cartItems  CartItem[]
  orderItems OrderItem[]
}

// ✅ مدل جدید برای رنگ‌ها
model Color {
  id       String   @id @default(uuid())
  name     String   @unique // مثلا "مشکی", "قرمز"
  hexCode  String   @unique // مثلا "#000000", "#FF0000"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  productColors ProductColor[]
}

// ✅ مدل میانی برای رابطه Many-to-Many بین Product و Color
model ProductColor {
  id        String   @id @default(uuid())
  productId String
  colorId   String
  createdAt DateTime @default(now())

  product Product @relation(fields: [productId], references: [id])
  color   Color   @relation(fields: [colorId], references: [id])

  @@unique([productId, colorId]) // تضمین می‌کند هر محصول یک رنگ را فقط یک بار داشته باشد
}

// ✅ مدل جدید برای سایزها
model Size {
  id        String   @id @default(uuid())
  name      String   @unique // مثلا "S", "M", "L", "Free Size"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  productSizes ProductSize[]
}

// ✅ مدل میانی برای رابطه Many-to-Many بین Product و Size
model ProductSize {
  id        String   @id @default(uuid())
  productId String
  sizeId    String
  createdAt DateTime @default(now())

  product Product @relation(fields: [productId], references: [id])
  size    Size    @relation(fields: [sizeId], references: [id])

  @@unique([productId, sizeId]) // تضمین می‌کند هر محصول یک سایز را فقط یک بار داشته باشد
}


model LikedProduct {
  id        String   @id @default(uuid())
  userId    String
  productId String
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
}

model Cart {
  id        String     @id @default(uuid())
  userId    String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  user  User     @relation(fields: [userId], references: [id])
  items CartItem[]
}

model CartItem {
  id        String   @id @default(uuid())
  cartId    String
  productId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cart    Cart    @relation(fields: [cartId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@unique([cartId, productId])
}

model Order {
  id          String   @id @default(uuid())
  userId      String
  totalAmount Float
  status      String   @default("pending")
  orderDate   DateTime @default(now())

  user  User      @relation(fields: [userId], references: [id])
  items OrderItem[]
}

model OrderItem {
  id           String   @id @default(uuid())
  orderId      String
  productId    String
  quantity     Int
  priceAtOrder Float

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@unique([orderId, productId])
}

model Address {
  id         String   @id @default(uuid())
  userId     String
  title      String?
  province   String
  city       String
  postalCode String
  details    String
  isDefault  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@unique([userId, title], name: "UserAddressTitleUnique")
}